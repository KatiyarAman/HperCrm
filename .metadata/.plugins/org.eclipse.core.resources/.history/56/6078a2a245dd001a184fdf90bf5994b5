package com.sterp.multitenant.tenant.service.impl;

import java.util.HashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.sterp.multitenant.tenant.entity.Authority;
import com.sterp.multitenant.tenant.entity.UserEntity;
import com.sterp.multitenant.tenant.repository.UserRepository;
import com.sterp.multitenant.tenant.service.UserService;

@Service
public class UserServiceImpl implements UserService {

	@Autowired
	UserRepository userRepository;

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		UserEntity user = this.userRepository.findByUsername(username);
		if (user == null) {
			throw new UsernameNotFoundException(username);
		} else {
			Set<GrantedAuthority> grantedAuthorities = new HashSet<GrantedAuthority>();
			for (Authority grantedAuthority : user.getAuthorities()) {
				grantedAuthorities.add(new SimpleGrantedAuthority(grantedAuthority.getName().toString()));
			}
			return new User(user.getUsername(), user.getPassword(), grantedAuthorities);
		}
	}

	@Override
	public UserEntity getUserByUsername(String username) {
		UserEntity userEntity = userRepository.findByUsername(username);
		if (userEntity == null) {
			throw new UsernameNotFoundException(username);
		}
//		UserDTO returnValue = new UserDTO();
//		BeanUtils.copyProperties(userEntity, returnValue);
		return userEntity;
	}

	@Override
	public UserEntity getUserById(long userId) {
		return this.userRepository.findById(userId).get();
	}

}
